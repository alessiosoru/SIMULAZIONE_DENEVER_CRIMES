METODI STATISTICHE GRAFI

// RAGGIUNGIBILI CON JGRAPHT
	
	public List<String> getRaggiungibili(String stato){
		List<String> raggiungibili = new LinkedList<>();
		// indifferente se in ampiezza o in profondità
		DepthFirstIterator<String, DefaultEdge> dp = 
				new DepthFirstIterator<String, DefaultEdge>(this.grafo, stato);
		dp.next(); // scarto il primo elemento che è lo stato sorgente
		while(dp.hasNext()) {
			raggiungibili.add(dp.next());
		}
		
		return raggiungibili;
	}
	
	
// PERCORSO MASSIMO CON RICORSIONE

	public List<String> getPercorsoMassimo(String partenza){
		this.ottima = new LinkedList<String>();
		List<String> parziale = new LinkedList<String>(); // soluzione parziale
		parziale.add(partenza);
		
		cercaPercorso(parziale); // non passo anche grafo e ottima perchè li 
		// ho come attributo e ci poss già accedere
		
		return this.ottima;
	}

	private void cercaPercorso(List<String> parziale) {
		
		// vedere se la soluzione corrente è migliore della ottima corrente
		if(parziale.size()>ottima.size()) {
			this.ottima = new LinkedList(parziale);
		}
		
		List<String> candidati = this.getSuccessori(parziale.get(parziale.size()-1)); // il livello è parziale.size()-1
		for(String candidato : candidati) {
			if(!parziale.contains(candidato)) {
				// è un candidato che non ho ancora considerato
				parziale.add(candidato);
				this.cercaPercorso(parziale);
				parziale.remove(parziale.size()-1); // anche parziale.remove(candidato)
			}
		}
		
	}

// VERTICI E ARCHI
	public int getNVertici() {
		return this.grafo.vertexSet().size();
	}
	
	public int getNArchi() {
		return this.grafo.edgeSet().size();
	}
	
// SUCCESSORI E PREDECESSORI	
	public List<String> getSuccessori(String stato) {
		return Graphs.successorListOf(this.grafo, stato);
		// successorListOf(), se non ci sono successori non ritorna null,
		// ma ritorna una lista vuota
	}
	
	public List<String> getPredecessori(String stato) {
		return Graphs.predecessorListOf(this.grafo, stato);
	}
	

	